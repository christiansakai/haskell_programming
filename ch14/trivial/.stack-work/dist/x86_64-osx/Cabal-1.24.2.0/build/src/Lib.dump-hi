
==================== FINAL INTERFACE ====================
2017-04-26 19:25:19.661146 UTC

interface trivial-0.1.0.0-JrB6jqzvpbzIsdTpHTPzux:Lib [family instance module] 8002
  interface hash: 030a0dffedc5531a82e8018ba0df5e74
  ABI hash: 78a27190d2f396fe16019ab69a4f3889
  export-list hash: 4fc9235161b380146a878657bb6c0571
  orphan hash: 258823eb399933099791dbadc22a2a22
  flag hash: c3b9198a5914f04c318c3e523cd07cbc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.falseGen
  Lib.identityGen
  Lib.identityGenInt
  Lib.identityPlay
  Lib.pairGen
  Lib.pairGenIntString
  Lib.pairPlay
  Lib.sumEqualPlay
  Lib.sumFirstPlay
  Lib.sumGenCharInt
  Lib.sumGenCharIntFirst
  Lib.sumGenEqual
  Lib.sumGenFirstPls
  Lib.trivialGen
  Lib.trivialPlay
  Lib.trueGen
  Lib.Bool'{Lib.False' Lib.True'}
  Lib.Identity{Lib.Identity}
  Lib.Pair{Lib.Pair}
  Lib.Sum{Lib.First Lib.Second}
  Lib.Trivial{Lib.Trivial}
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.2@ghc-boot-th-8.0.2
                      ghc-prim-0.5.0.0 integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-BGjMgO8m67W8CHiEl15kZ7
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck 5d7cb5b36e5406469ab226c41cc67877
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Arbitrary 342eadc053569cafd2fca5bf2cb2bc7a
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-Jyj4gc4JxkEIgGFLAsGhs9:Test.QuickCheck.Gen fcc53fc3ed5253800621dd3f6e0c2696
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Generics 1dbec2bc7dd1c5bd8c89ed857eaed19b
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
0fcc8b773b8e866056a7138b2d299018
  $fArbitraryIdentity ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Arbitrary.Arbitrary (Lib.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a).
                  @ (Lib.Identity a)
                  (Lib.identityGen @ a $dArbitrary)
                  (Lib.$fArbitraryIdentity_$cshrink @ a $dArbitrary) -}
0fcc8b773b8e866056a7138b2d299018
  $fArbitraryIdentity_$cshrink ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Lib.Identity a -> [Lib.Identity a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (ds1 :: Lib.Identity a) ->
                 GHC.Types.[] @ (Lib.Identity a)) -}
333af316595cd7001525f3a746091cff
  $fArbitraryPair ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Arbitrary.Arbitrary (Lib.Pair a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                      ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b).
                  @ (Lib.Pair a b)
                  (Lib.pairGen @ a @ b $dArbitrary $dArbitrary1)
                  (Lib.$fArbitraryPair_$cshrink @ a @ b $dArbitrary $dArbitrary1) -}
333af316595cd7001525f3a746091cff
  $fArbitraryPair_$cshrink ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Lib.Pair a b -> [Lib.Pair a b]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (ds1 :: Lib.Pair a b) ->
                 GHC.Types.[] @ (Lib.Pair a b)) -}
1536201211676383ca628023843765ee
  $fArbitraryTrivial ::
    Test.QuickCheck.Arbitrary.Arbitrary Lib.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Trivial Lib.trivialGen Lib.$fArbitraryTrivial_$cshrink -}
1536201211676383ca628023843765ee
  $fArbitraryTrivial_$cshrink :: Lib.Trivial -> [Lib.Trivial]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Lib.Trivial) -> GHC.Types.[] @ Lib.Trivial) -}
aee728353dcd966cbe663aaa339b4c9a
  $fCoArbitraryBool' ::
    Test.QuickCheck.Arbitrary.CoArbitrary Lib.Bool'
  DFunId
  {- Arity: 4,
     Strictness: <S,1*U><C(C(S)),1*C1(C1(U))><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Lib.$fCoArbitraryBool'_$ccoarbitrary
                  `cast`
                (Sym (Test.QuickCheck.Arbitrary.N:CoArbitrary[0] <Lib.Bool'>_N)) -}
aee728353dcd966cbe663aaa339b4c9a
  $fCoArbitraryBool'1 ::
    Lib.Bool'
    -> Test.QuickCheck.Gen.Gen b
    -> Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int
    -> b
  {- Arity: 4,
     Strictness: <S,1*U><C(C(S)),1*C1(C1(U))><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ b
                   (eta2 :: Lib.Bool')
                   (eta :: Test.QuickCheck.Gen.Gen b)
                   (eta1 :: Test.QuickCheck.Random.QCGen)
                   (eta3 :: GHC.Types.Int) ->
                 case eta2 of wild {
                   Lib.True'
                   -> eta `cast` (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                        (case eta1
                                `cast`
                              (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                         case System.Random.TF.Gen.$wtfGenSplit
                                ww1
                                ww2
                                ww3
                                ww4 of ww7 { (#,#) ww8 ww9 ->
                         case ww9 of g2 { System.Random.TF.Gen.TFGen ipv ipv1 ipv2 ipv3 ipv4 ipv5 ->
                         case System.Random.TF.Gen.$w$csplitn
                                ipv
                                ipv1
                                ipv2
                                ipv3
                                15#
                                16384## of ww11 { (#,,,,,#) ww10 ww12 ww13 ww14 ww15 ww16 ->
                         (System.Random.TF.Gen.TFGen ww10 ww12 ww13 ww14 ww15 ww16)
                           `cast`
                         (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } } })
                        eta3
                   Lib.False'
                   -> eta `cast` (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                        (case eta1
                                `cast`
                              (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                         case System.Random.TF.Gen.$wtfGenSplit
                                ww1
                                ww2
                                ww3
                                ww4 of ww7 { (#,#) ww8 ww9 ->
                         case ww8 of g2 { System.Random.TF.Gen.TFGen ipv ipv1 ipv2 ipv3 ipv4 ipv5 ->
                         case System.Random.TF.Gen.$w$csplitn
                                ipv
                                ipv1
                                ipv2
                                ipv3
                                15#
                                16384## of ww11 { (#,,,,,#) ww10 ww12 ww13 ww14 ww15 ww16 ->
                         (System.Random.TF.Gen.TFGen ww10 ww12 ww13 ww14 ww15 ww16)
                           `cast`
                         (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } } })
                        eta3 }) -}
aee728353dcd966cbe663aaa339b4c9a
  $fCoArbitraryBool'_$ccoarbitrary ::
    Lib.Bool' -> Test.QuickCheck.Gen.Gen b -> Test.QuickCheck.Gen.Gen b
  {- Arity: 4,
     Strictness: <S,1*U><C(C(S)),1*C1(C1(U))><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fCoArbitraryBool'1
                  `cast`
                (forall (b :: <*>_N).
                 <Lib.Bool'>_R
                 ->_R <Test.QuickCheck.Gen.Gen b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <b>_R)) -}
0fcc8b773b8e866056a7138b2d299018
  $fEqIdentity :: GHC.Classes.Eq a => GHC.Classes.Eq (Lib.Identity a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (Lib.Identity a)
                  (Lib.$fEqIdentity_$c== @ a $dEq)
                  (Lib.$fEqIdentity_$c/= @ a $dEq) -}
0fcc8b773b8e866056a7138b2d299018
  $fEqIdentity_$c/= ::
    GHC.Classes.Eq a =>
    Lib.Identity a -> Lib.Identity a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: Lib.Identity a)
                   (b :: Lib.Identity a) ->
                 case a1 of wild { Lib.Identity a2 ->
                 case b of wild1 { Lib.Identity b1 ->
                 case GHC.Classes.== @ a $dEq a2 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
0fcc8b773b8e866056a7138b2d299018
  $fEqIdentity_$c== ::
    GHC.Classes.Eq a =>
    Lib.Identity a -> Lib.Identity a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U)><S,1*U(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: Lib.Identity a)
                   (ds1 :: Lib.Identity a) ->
                 case ds of wild { Lib.Identity a1 ->
                 case ds1 of wild1 { Lib.Identity b1 ->
                 GHC.Classes.== @ a $dEq a1 b1 } }) -}
333af316595cd7001525f3a746091cff
  $fEqPair ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Lib.Pair a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Lib.Pair a b)
                  (Lib.$fEqPair_$c== @ a @ b $dEq $dEq1)
                  (Lib.$fEqPair_$c/= @ a @ b $dEq $dEq1) -}
333af316595cd7001525f3a746091cff
  $fEqPair_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Lib.Pair a b -> Lib.Pair a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: Lib.Pair a b)
                   (w3 :: Lib.Pair a b) ->
                 case w2 of ww { Lib.Pair ww1 ww2 ->
                 case w3 of ww3 { Lib.Pair ww4 ww5 ->
                 Lib.$w$c/= @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
333af316595cd7001525f3a746091cff
  $fEqPair_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Lib.Pair a b -> Lib.Pair a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><S,1*U(U,U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (w2 :: Lib.Pair a b)
                   (w3 :: Lib.Pair a b) ->
                 case w2 of ww { Lib.Pair ww1 ww2 ->
                 case w3 of ww3 { Lib.Pair ww4 ww5 ->
                 Lib.$w$c== @ a @ b w w1 ww1 ww2 ww4 ww5 } }) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fEqSum ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    GHC.Classes.Eq (Lib.Sum a b)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dEq :: GHC.Classes.Eq b)
                      ($dEq1 :: GHC.Classes.Eq a).
                  @ (Lib.Sum a b)
                  (Lib.$fEqSum_$c== @ a @ b $dEq $dEq1)
                  (Lib.$fEqSum_$c/= @ a @ b $dEq $dEq1) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fEqSum_$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Lib.Sum a b -> Lib.Sum a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (a1 :: Lib.Sum a b)
                   (b1 :: Lib.Sum a b) ->
                 case a1 of wild {
                   Lib.First a2
                   -> case b1 of wild1 {
                        Lib.First b2
                        -> case GHC.Classes.== @ a $dEq1 a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Lib.Second ipv -> GHC.Types.True }
                   Lib.Second a2
                   -> case b1 of wild1 {
                        Lib.First ipv -> GHC.Types.True
                        Lib.Second b2
                        -> case GHC.Classes.== @ b $dEq a2 b2 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fEqSum_$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    Lib.Sum a b -> Lib.Sum a b -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq b)
                   ($dEq1 :: GHC.Classes.Eq a)
                   (ds :: Lib.Sum a b)
                   (ds1 :: Lib.Sum a b) ->
                 case ds of wild {
                   Lib.First a1
                   -> case ds1 of wild1 {
                        Lib.First b1 -> GHC.Classes.== @ a $dEq1 a1 b1
                        Lib.Second ipv -> GHC.Types.False }
                   Lib.Second a1
                   -> case ds1 of wild1 {
                        Lib.First ipv -> GHC.Types.False
                        Lib.Second b1 -> GHC.Classes.== @ b $dEq a1 b1 } }) -}
1536201211676383ca628023843765ee
  $fEqTrivial :: GHC.Classes.Eq Lib.Trivial
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Trivial Lib.$fEqTrivial_$c== Lib.$fEqTrivial_$c/= -}
1536201211676383ca628023843765ee
  $fEqTrivial_$c/= :: Lib.Trivial -> Lib.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Lib.Trivial) (b :: Lib.Trivial) ->
                 case a of wild { Lib.Trivial ->
                 case b of wild1 { Lib.Trivial -> GHC.Types.False } }) -}
1536201211676383ca628023843765ee
  $fEqTrivial_$c== :: Lib.Trivial -> Lib.Trivial -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Lib.Trivial) (ds1 :: Lib.Trivial) ->
                 case ds of wild { Lib.Trivial ->
                 case ds1 of wild1 { Lib.Trivial -> GHC.Types.True } }) -}
aee728353dcd966cbe663aaa339b4c9a
  $fGenericBool' :: GHC.Generics.Generic Lib.Bool'
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Bool' Lib.$fGenericBool'_$cfrom Lib.$fGenericBool'_$cto -}
aee728353dcd966cbe663aaa339b4c9a
  $fGenericBool'1 ::
    Lib.Bool'
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "True'" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "False'" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Lib.Bool') ->
                 case x1 of wild {
                   Lib.True' -> Lib.$fGenericBool'3 @ x
                   Lib.False' -> Lib.$fGenericBool'2 @ x }) -}
056ec1ff417bae39e0a625a550cefd16
  $fGenericBool'2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "True'" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "False'" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "True'" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "False'" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "False'" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
32dd0406b08addee3f0895d03c0a92d9
  $fGenericBool'3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "True'" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "False'" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "True'" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "False'" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "True'" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
aee728353dcd966cbe663aaa339b4c9a
  $fGenericBool'_$cfrom :: Lib.Bool' -> GHC.Generics.Rep Lib.Bool' x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Lib.$fGenericBool'1
                  `cast`
                (forall (x :: <GHC.Types.*>_N).
                 <Lib.Bool'>_R
                 ->_R Trans
                          (Sym (GHC.Generics.N:M1[0]
                                    <GHC.Generics.D>_P
                                    <'GHC.Generics.MetaData
                                       "Bool'"
                                       "Lib"
                                       "trivial-0.1.0.0-JrB6jqzvpbzIsdTpHTPzux"
                                       'GHC.Types.False>_P
                                    <GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "True'" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       GHC.Generics.U1
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "False'"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        GHC.Generics.U1>_R))
                          (Sub (Sym (Lib.Rep_Bool'[0]))) <x>_N) -}
aee728353dcd966cbe663aaa339b4c9a
  $fGenericBool'_$cto :: GHC.Generics.Rep Lib.Bool' x -> Lib.Bool'
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (ds :: GHC.Generics.Rep Lib.Bool' x) ->
                 case ds
                        `cast`
                      (Trans
                           (Sub (Lib.Rep_Bool'[0]))
                           (GHC.Generics.N:M1[0]
                                <GHC.Generics.D>_P
                                <'GHC.Generics.MetaData
                                   "Bool'"
                                   "Lib"
                                   "trivial-0.1.0.0-JrB6jqzvpbzIsdTpHTPzux"
                                   'GHC.Types.False>_P
                                <GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "True'" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   GHC.Generics.U1
                                 GHC.Generics.:+: GHC.Generics.M1
                                                    GHC.Generics.C
                                                    ('GHC.Generics.MetaCons
                                                       "False'"
                                                       'GHC.Generics.PrefixI
                                                       'GHC.Types.False)
                                                    GHC.Generics.U1>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1 -> case ds1 of tpl { DEFAULT -> Lib.True' }
                   GHC.Generics.R1 ds1
                   -> case ds1 of tpl { DEFAULT -> Lib.False' } }) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity :: GHC.Show.Show a => GHC.Show.Show (Lib.Identity a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Lib.Identity a)
                  (Lib.$fShowIdentity_$cshowsPrec @ a $dShow)
                  (Lib.$fShowIdentity_$cshow @ a $dShow)
                  (Lib.$fShowIdentity_$cshowList @ a $dShow) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity1 :: Lib.Identity GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Identity GHC.Types.Int)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Lib.Identity ww1 ->
                 Lib.$w$s$cshowsPrec 0# ww1 w1 }) -}
68751cba827b792f53f893cf416f64c0
  $fShowIdentity2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Identity "#) -}
61fd8df8a0b1bea9fd6959544cf3c35c
  $fShowIdentity3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
a2b773a496f9196b57ccfbf6d69800da
  $fShowIdentity4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity_$cshow ::
    GHC.Show.Show a => Lib.Identity a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: Lib.Identity a) ->
                 case x of wild { Lib.Identity b1 ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Lib.$fShowIdentity2)
                   (GHC.Show.showsPrec
                      @ a
                      $dShow
                      Lib.$fShowIdentity4
                      b1
                      (GHC.Types.[] @ GHC.Types.Char)) }) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity_$cshowList ::
    GHC.Show.Show a => [Lib.Identity a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Lib.Identity a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lib.Identity a)
                   (Lib.$fShowIdentity_$cshowsPrec @ a $dShow Lib.$fShowIdentity3)
                   eta
                   eta1) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Lib.Identity a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Lib.Identity a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Lib.Identity ww3 ->
                 Lib.$w$cshowsPrec @ a w ww1 ww3 } }) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity_$s$cshow ::
    Lib.Identity GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U))>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Lib.Identity GHC.Types.Int) ->
                 case w of ww { Lib.Identity ww1 -> Lib.$w$s$cshow ww1 }) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity_$s$cshowList ::
    [Lib.Identity GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Lib.Identity GHC.Types.Int])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lib.Identity GHC.Types.Int)
                   Lib.$fShowIdentity1
                   eta
                   eta1) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity_$s$cshowsPrec ::
    GHC.Types.Int -> Lib.Identity GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Identity GHC.Types.Int)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Lib.Identity ww3 ->
                 Lib.$w$s$cshowsPrec ww1 ww3 w2 } }) -}
0fcc8b773b8e866056a7138b2d299018
  $fShowIdentity_$s$fShowIdentity ::
    GHC.Show.Show (Lib.Identity GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Lib.Identity GHC.Types.Int)
                  Lib.$fShowIdentity_$s$cshowsPrec
                  Lib.$fShowIdentity_$s$cshow
                  Lib.$fShowIdentity_$s$cshowList -}
333af316595cd7001525f3a746091cff
  $fShowPair ::
    (GHC.Show.Show b, GHC.Show.Show a) => GHC.Show.Show (Lib.Pair a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Lib.Pair a b)
                  (Lib.$fShowPair_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Lib.$fShowPair_$cshow @ a @ b $dShow $dShow1)
                  (Lib.$fShowPair_$cshowList @ a @ b $dShow $dShow1) -}
b80f07bee507451684180e62e34ac026
  $fShowPair1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pair "#) -}
333af316595cd7001525f3a746091cff
  $fShowPair_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Lib.Pair a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Lib.Pair a b) ->
                 Lib.$fShowPair_$cshowsPrec
                   @ a
                   @ b
                   $dShow
                   $dShow1
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
333af316595cd7001525f3a746091cff
  $fShowPair_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Lib.Pair a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Lib.Pair a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lib.Pair a b)
                   (Lib.$fShowPair_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Lib.$fShowIdentity3)
                   eta
                   eta1) -}
333af316595cd7001525f3a746091cff
  $fShowPair_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Lib.Pair a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Lib.Pair a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 case w3 of ww2 { Lib.Pair ww3 ww4 ->
                 Lib.$w$cshowsPrec1 @ a @ b w w1 ww1 ww3 ww4 } }) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum ::
    (GHC.Show.Show b, GHC.Show.Show a) => GHC.Show.Show (Lib.Sum a b)
  DFunId
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a
                      @ b
                      ($dShow :: GHC.Show.Show b)
                      ($dShow1 :: GHC.Show.Show a).
                  @ (Lib.Sum a b)
                  (Lib.$fShowSum_$cshowsPrec @ a @ b $dShow $dShow1)
                  (Lib.$fShowSum_$cshow @ a @ b $dShow $dShow1)
                  (Lib.$fShowSum_$cshowList @ a @ b $dShow $dShow1) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum1 ::
    Lib.Sum GHC.Types.Char GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Lib.Sum GHC.Types.Char GHC.Types.Int)
                   (w1 :: GHC.Base.String) ->
                 Lib.$w$s$cshowsPrec1 0# w w1) -}
028662a6b784cb3f1602c3be7625c26f
  $fShowSum2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Second "#) -}
30dadbf703b55af4ab9fd774f766fe0f
  $fShowSum3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "First "#) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum_$cshow ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    Lib.Sum a b -> GHC.Base.String
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (x :: Lib.Sum a b) ->
                 case x of wild {
                   Lib.First b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lib.$fShowSum3
                        (GHC.Show.showsPrec
                           @ a
                           $dShow1
                           Lib.$fShowIdentity4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Lib.Second b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lib.$fShowSum2
                        (GHC.Show.showsPrec
                           @ b
                           $dShow
                           Lib.$fShowIdentity4
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum_$cshowList ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    [Lib.Sum a b] -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(U)),A,A)><L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show b)
                   ($dShow1 :: GHC.Show.Show a)
                   (eta :: [Lib.Sum a b])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lib.Sum a b)
                   (Lib.$fShowSum_$cshowsPrec
                      @ a
                      @ b
                      $dShow
                      $dShow1
                      Lib.$fShowIdentity3)
                   eta
                   eta1) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum_$cshowsPrec ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Types.Int -> Lib.Sum a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: GHC.Types.Int)
                   (w3 :: Lib.Sum a b) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Lib.$w$cshowsPrec2 @ a @ b w w1 ww1 w3 }) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum_$s$cshow ::
    Lib.Sum GHC.Types.Char GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Sum GHC.Types.Char GHC.Types.Int) ->
                 Lib.$fShowSum_$s$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum_$s$cshowList ::
    [Lib.Sum GHC.Types.Char GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [Lib.Sum GHC.Types.Char GHC.Types.Int])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Lib.Sum GHC.Types.Char GHC.Types.Int)
                   Lib.$fShowSum1
                   eta
                   eta1) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum_$s$cshowsPrec ::
    GHC.Types.Int
    -> Lib.Sum GHC.Types.Char GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Lib.Sum GHC.Types.Char GHC.Types.Int)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Lib.$w$s$cshowsPrec1 ww1 w1 w2 }) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $fShowSum_$s$fShowSum ::
    GHC.Show.Show (Lib.Sum GHC.Types.Char GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Lib.Sum GHC.Types.Char GHC.Types.Int)
                  Lib.$fShowSum_$s$cshowsPrec
                  Lib.$fShowSum_$s$cshow
                  Lib.$fShowSum_$s$cshowList -}
1536201211676383ca628023843765ee
  $fShowTrivial :: GHC.Show.Show Lib.Trivial
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Lib.Trivial
                  Lib.$fShowTrivial_$cshowsPrec
                  Lib.$fShowTrivial_$cshow
                  Lib.$fShowTrivial_$cshowList -}
1536201211676383ca628023843765ee
  $fShowTrivial1 :: Lib.Trivial -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Lib.Trivial) (eta :: GHC.Base.String) ->
                 case ds of wild { Lib.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Lib.$fShowTrivial2)
                   eta }) -}
fb7d530c36526f431bddadba6745a9f2
  $fShowTrivial2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Trivial"#) -}
1536201211676383ca628023843765ee
  $fShowTrivial_$cshow :: Lib.Trivial -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Lib.Trivial) ->
                 case x of wild { Lib.Trivial -> Lib.$fShowTrivial2 }) -}
1536201211676383ca628023843765ee
  $fShowTrivial_$cshowList :: [Lib.Trivial] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Lib.Trivial
                   Lib.$fShowTrivial1) -}
1536201211676383ca628023843765ee
  $fShowTrivial_$cshowsPrec ::
    GHC.Types.Int -> Lib.Trivial -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Lib.Trivial)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { Lib.Trivial ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Lib.$fShowTrivial2)
                   eta }) -}
4a008c6f2aecd5cad5fdf5779677bfd2
  $s$fArbitrary[] ::
    Test.QuickCheck.Arbitrary.Arbitrary [GHC.Types.Char]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [GHC.Types.Char]
                  (Test.QuickCheck.Arbitrary.$fArbitrary[]_$carbitrary
                     @ GHC.Types.Char
                     Test.QuickCheck.Arbitrary.$fArbitraryChar)
                  Lib.$s$fArbitrary[]_$s$fArbitrary[]_$cshrink -}
8709a7bae11fc39c3783e6cbc7a9e4c3
  $s$fArbitrary[]_$s$fArbitrary[]_$cshrink ::
    [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (xs :: [GHC.Types.Char]) ->
                 Test.QuickCheck.Arbitrary.shrinkList
                   @ GHC.Types.Char
                   Test.QuickCheck.Arbitrary.$fArbitraryChar_$cshrink
                   xs) -}
85cc9aaaf137d0b58cd7875169458c3e
  $tc'False' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   168040570440390151##
                   10577216162318090939##
                   Lib.$trModule
                   Lib.$tc'False'1) -}
c5fdf2990cd0ab87e85a06b1a9192ea8
  $tc'False'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'False'"#) -}
e6657866ceddc1881bd43c873389690b
  $tc'First :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6267222335925014543##
                   17144531859189619602##
                   Lib.$trModule
                   Lib.$tc'First1) -}
87f89c5bd951b59b4e24454f415723cb
  $tc'First1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'First"#) -}
961dcf2e45bb1eff2dfe991fa9ead71a
  $tc'Identity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12125609446466984513##
                   7719941722247963764##
                   Lib.$trModule
                   Lib.$tc'Identity1) -}
f0821f4b97394b99ffc3338ea824680e
  $tc'Identity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Identity"#) -}
2ba63dcfc3e45b6250cb2cdf7386ea2e
  $tc'Pair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13902255028217679245##
                   9725201214585217587##
                   Lib.$trModule
                   Lib.$tc'Pair1) -}
95fbac5b985c5b89caaa848a2f1085c8
  $tc'Pair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pair"#) -}
9fcddeb5d9937939a3a2f15859f80cdf
  $tc'Second :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9997954957775840194##
                   17110879293048074438##
                   Lib.$trModule
                   Lib.$tc'Second1) -}
9689cc17d404760bcb3161645c06b94d
  $tc'Second1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Second"#) -}
3b4e81f6e50c1db188ecb4290842f4ae
  $tc'Trivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18156972163864611391##
                   17629133893339333299##
                   Lib.$trModule
                   Lib.$tc'Trivial1) -}
db4d08c93e3c55ce7831b3074fbfd934
  $tc'Trivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Trivial"#) -}
55926d19a2f538f357f320794879ab98
  $tc'True' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10959786125647343597##
                   13788529800093451316##
                   Lib.$trModule
                   Lib.$tc'True'1) -}
f891c3897f57831df7911a8152431bc2
  $tc'True'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'True'"#) -}
ebb9bd5e1e1fd3d4b18999fa67cc5d17
  $tcBool' :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8931643270730469650##
                   11786268030059994353##
                   Lib.$trModule
                   Lib.$tcBool'1) -}
ef117114551b88b011c073dd434d5a09
  $tcBool'1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bool'"#) -}
38784adc016665315282dbdd320080c4
  $tcIdentity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   476372313437312833##
                   7074869575434791691##
                   Lib.$trModule
                   Lib.$tcIdentity1) -}
5433b6a1f54688c48dae9a269f3bf4bf
  $tcIdentity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Identity"#) -}
6eb5f4287e1f6ed6d41127c16bf29786
  $tcPair :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15241672085879376850##
                   13828554606447781162##
                   Lib.$trModule
                   Lib.$tcPair1) -}
3aff7f3780bea336eb84492b288d0f14
  $tcPair1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Pair"#) -}
364b35654be191db2b644888653ca90c
  $tcSum :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7393464346731570000##
                   8738748848510177477##
                   Lib.$trModule
                   Lib.$tcSum1) -}
2f20d830416740bf6f05077fe011e982
  $tcSum1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Sum"#) -}
7782bb39afe15bfb3a865e7f85bb8bb0
  $tcTrivial :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8741029918744022272##
                   17899556112046286285##
                   Lib.$trModule
                   Lib.$tcTrivial1) -}
7f4971c84d2e0c5cf3772af25fad8c9e
  $tcTrivial1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Trivial"#) -}
0a28337a7e387462f22cc87f75c7fac4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule2 Lib.$trModule1) -}
3e55ccfb1cb77821c83f1af3555059a2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Lib"#) -}
d099b32226bc6e1f7c89980126daf4d2
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "trivial-0.1.0.0-JrB6jqzvpbzIsdTpHTPzux"#) -}
d17d36fac74da2a466ce014b83d44f6c
  $w$c/= ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ b w ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
1e6e2e3580c8e6ee8ac8570c52520b5f
  $w$c== ::
    (GHC.Classes.Eq b, GHC.Classes.Eq a) =>
    a -> b -> a -> b -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Classes.Eq b)
                   (w1 :: GHC.Classes.Eq a)
                   (ww :: a)
                   (ww1 :: b)
                   (ww2 :: a)
                   (ww3 :: b) ->
                 case GHC.Classes.== @ a w1 ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ b w ww1 ww3 }) -}
5bedd72baf747baf5ca6c3aa65767720
  $w$cshowsPrec ::
    GHC.Show.Show a => GHC.Prim.Int# -> a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w Lib.$fShowIdentity4 ww1
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char Lib.$fShowIdentity2 (g x)
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Lib.$fShowIdentity2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }) -}
e55deae9f0acb1a70faf611141c70207
  $w$cshowsPrec1 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> a -> b -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: a)
                   (ww2 :: b) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ a w1 Lib.$fShowIdentity4 ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec @ b w Lib.$fShowIdentity4 ww2
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Lib.$fShowPair1
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Lib.$fShowPair1
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))))) }) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $w$cshowsPrec2 ::
    (GHC.Show.Show b, GHC.Show.Show a) =>
    GHC.Prim.Int# -> Lib.Sum a b -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><L,1*U(1*C1(C1(U)),A,A)><S,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: GHC.Show.Show b)
                   (w1 :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w2 :: Lib.Sum a b) ->
                 case w2 of wild {
                   Lib.First b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w1 Lib.$fShowIdentity4 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Lib.$fShowSum3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowSum3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   Lib.Second b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ b w Lib.$fShowIdentity4 b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char Lib.$fShowSum2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowSum2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
edafc4acb791f468fa12d612d834ae37
  $w$s$cshow :: GHC.Types.Int -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Lib.$fShowIdentity2
                   (case ww of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
719d960ffb8acf451efbf7f08ce7e1d5
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Lib.$fShowIdentity2
                        (case ww1 of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11# ww3 w of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Lib.$fShowIdentity2
                           (case ww1 of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
a75fb169225ec95bfbfa3a9d6f965b32
  $w$s$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Lib.Sum GHC.Types.Char GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Lib.Sum GHC.Types.Char GHC.Types.Int)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Lib.First b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Lib.$fShowSum3
                             (case b1 of ww1 { GHC.Types.C# ww2 ->
                              case ww2 of ds {
                                DEFAULT
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.shows14
                                     (GHC.Show.$wshowLitChar
                                        ds
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows14 w1))
                                '\''# -> GHC.Base.++ @ GHC.Types.Char GHC.Show.shows13 w1 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowSum3
                                (case b1 of ww1 { GHC.Types.C# ww2 ->
                                 case ww2 of ds {
                                   DEFAULT
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.shows14
                                        (GHC.Show.$wshowLitChar
                                           ds
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.shows14
                                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1)))
                                   '\''#
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        GHC.Show.shows13
                                        (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1) } })) }
                   Lib.Second b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Lib.$fShowSum2
                             (case b1 of ww2 { GHC.Types.I# ww3 ->
                              case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                              GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Lib.$fShowSum2
                                (case b1 of ww2 { GHC.Types.I# ww3 ->
                                 case GHC.Show.$wshowSignedInt
                                        11#
                                        ww3
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.shows4
                                           w1) of ww4 { (#,#) ww5 ww6 ->
                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) } }) -}
6777b2dbb543abf7f1d113fe0799cdad
  $wfalseGen ::
    Test.QuickCheck.Random.QCGen -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S,U>, Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (ww :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                   (case w `cast`
                         (Test.QuickCheck.Random.N:QCGen[0]) of ww1 { System.Random.TF.Gen.TFGen ww2 ww3 ww4 ww5 ww6 ww7 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww2
                           ww3
                           ww4
                           ww5 of ww8 { (#,#) ww9 ww10 ->
                    case ww9 of g2 { System.Random.TF.Gen.TFGen ipv ipv1 ipv2 ipv3 ipv4 ipv5 ->
                    case System.Random.TF.Gen.$w$csplitn
                           ipv
                           ipv1
                           ipv2
                           ipv3
                           15#
                           16384## of ww11 { (#,,,,,#) ww12 ww13 ww14 ww15 ww16 ww17 ->
                    (System.Random.TF.Gen.TFGen ww12 ww13 ww14 ww15 ww16 ww17)
                      `cast`
                    (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } } })
                   ww) -}
3ad364c1de9b2cc658314541d4c7f098
  $widentityGenInt ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> (# GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (w1 :: GHC.Types.Int) ->
                 (# case w1 of ww { GHC.Types.I# ww1 ->
                    case Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                           (case w `cast`
                                 (Test.QuickCheck.Random.N:QCGen[0]) of ww2 { System.Random.TF.Gen.TFGen ww3 ww4 ww5 ww6 ww7 ww8 ->
                            case System.Random.TF.Gen.$wtfGenSplit
                                   ww3
                                   ww4
                                   ww5
                                   ww6 of ww9 { (#,#) ww10 ww11 ->
                            ww10 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } })
                           ww1 of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 } } #)) -}
490a8f82fd35329d60fb27cefff81f11
  $wpairGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> (# a, b #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case w2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 (# (Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case ds1 of wild { (,) r1 r2 -> r1 })
                      w3,
                    (Test.QuickCheck.Arbitrary.arbitrary @ b w1)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                      (case ds1 of wild { (,) r1 r2 ->
                       case r2
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } })
                      w3 #)) -}
a30ff63a1555c3c788e0e11ccda25f94
  $wtrueGen ::
    Test.QuickCheck.Random.QCGen -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S,U>, Inline: [0],
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (ww :: GHC.Prim.Int#) ->
                 Test.QuickCheck.Arbitrary.$w$sarbitrarySizedIntegral
                   (case w `cast`
                         (Test.QuickCheck.Random.N:QCGen[0]) of ww1 { System.Random.TF.Gen.TFGen ww2 ww3 ww4 ww5 ww6 ww7 ->
                    case System.Random.TF.Gen.$wtfGenSplit
                           ww2
                           ww3
                           ww4
                           ww5 of ww8 { (#,#) ww9 ww10 ->
                    case ww10 of g2 { System.Random.TF.Gen.TFGen ipv ipv1 ipv2 ipv3 ipv4 ipv5 ->
                    case System.Random.TF.Gen.$w$csplitn
                           ipv
                           ipv1
                           ipv2
                           ipv3
                           15#
                           16384## of ww11 { (#,,,,,#) ww12 ww13 ww14 ww15 ww16 ww17 ->
                    (System.Random.TF.Gen.TFGen ww12 ww13 ww14 ww15 ww16 ww17)
                      `cast`
                    (Sym (Test.QuickCheck.Random.N:QCGen[0])) } } } })
                   ww) -}
aee728353dcd966cbe663aaa339b4c9a
  data Bool' = True' | False'
0fcc8b773b8e866056a7138b2d299018
  data Identity a = Identity a
333af316595cd7001525f3a746091cff
  data Pair a b = Pair a b
aee728353dcd966cbe663aaa339b4c9a
  axiom Rep_Bool'::
      GHC.Generics.Rep Lib.Bool'
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Bool'"
               "Lib"
               "trivial-0.1.0.0-JrB6jqzvpbzIsdTpHTPzux"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "True'" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "False'" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
a75fb169225ec95bfbfa3a9d6f965b32
  data Sum a b = First a | Second b
1536201211676383ca628023843765ee
  data Trivial = Trivial
39977d044e4d2b87f7f87bed2997a368
  falseGen :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Lib.falseGen1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R)) -}
a19cf9db15e6433ac7bd29826bf6fdeb
  falseGen1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case Lib.$wfalseGen w ww1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
0fcc8b773b8e866056a7138b2d299018
  identityGen ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Gen.Gen (Lib.Identity a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Lib.identityGen1
                  `cast`
                (forall (a :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Identity a>_R)) -}
0fcc8b773b8e866056a7138b2d299018
  identityGen1 ::
    Test.QuickCheck.Arbitrary.Arbitrary a =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Lib.Identity a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Random.QCGen)
                   (w2 :: GHC.Types.Int) ->
                 Lib.Identity
                   @ a
                   ((Test.QuickCheck.Arbitrary.arbitrary @ a w)
                      `cast`
                    (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                      (case w1
                              `cast`
                            (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                       case System.Random.TF.Gen.$wtfGenSplit
                              ww1
                              ww2
                              ww3
                              ww4 of ww7 { (#,#) ww8 ww9 ->
                       ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])) } })
                      w2)) -}
a998c5432daa2518927903f375299ccf
  identityGenInt ::
    Test.QuickCheck.Gen.Gen (Lib.Identity GHC.Types.Int)
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Lib.identityGenInt1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          <Lib.Identity GHC.Types.Int>_R)) -}
615eb8b73da3fc56e565a7daf880dd1e
  identityGenInt1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Lib.Identity GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><L,1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case Lib.$widentityGenInt w w1 of ww { Unit# ww1 ->
                 Lib.Identity @ GHC.Types.Int ww1 }) -}
a174491003933de22beba92618f4b6e8
  identityPlay :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.identityPlay1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b1951df9d6991d142561ded307c0001d
  identityPlay1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Gen.sample1
                   @ (Lib.Identity GHC.Types.Int)
                   Lib.$fShowIdentity_$s$fShowIdentity
                   Lib.identityGenInt1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Lib.Identity GHC.Types.Int>_R))) -}
333af316595cd7001525f3a746091cff
  pairGen ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Lib.Pair a b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Unfolding: InlineRule (0, True, True)
                Lib.pairGen1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Pair a b>_R)) -}
333af316595cd7001525f3a746091cff
  pairGen1 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Lib.Pair a b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   @ b
                   (w :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   (w1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (w2 :: Test.QuickCheck.Random.QCGen)
                   (w3 :: GHC.Types.Int) ->
                 case Lib.$wpairGen @ a @ b w w1 w2 w3 of ww { (#,#) ww1 ww2 ->
                 Lib.Pair @ a @ b ww1 ww2 }) -}
ad75290f84e72ab8110e766526e055d2
  pairGenIntString ::
    Test.QuickCheck.Gen.Gen (Lib.Pair GHC.Types.Int GHC.Base.String)
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                Lib.pairGenIntString1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          <Lib.Pair GHC.Types.Int GHC.Base.String>_R)) -}
e902ccbe467e83d4c25b549a7dc410a2
  pairGenIntString1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Lib.Pair GHC.Types.Int GHC.Base.String
  {- Arity: 2,
     Unfolding: (\ (w :: Test.QuickCheck.Random.QCGen)
                   (w1 :: GHC.Types.Int) ->
                 case Lib.$wpairGen
                        @ GHC.Types.Int
                        @ GHC.Base.String
                        Test.QuickCheck.Arbitrary.$fArbitraryInt
                        Lib.$s$fArbitrary[]
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 Lib.Pair @ GHC.Types.Int @ GHC.Base.String ww1 ww2 }) -}
1ed42277dbcccc146bdaf15ed8a313a6
  pairPlay :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.pairPlay1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
15a13325de72ef33a7c465c0f9b537aa
  pairPlay1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Gen.sample1
                   @ (Lib.Pair GHC.Types.Int GHC.Base.String)
                   Lib.pairPlay2
                   Lib.pairGenIntString1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Lib.Pair GHC.Types.Int GHC.Base.String>_R))) -}
c0b678bbd1185460425f219219b77f99
  pairPlay2 :: GHC.Show.Show (Lib.Pair GHC.Types.Int GHC.Base.String)
  {- Unfolding: (Lib.$fShowPair
                   @ GHC.Types.Int
                   @ [GHC.Types.Char]
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShowInt) -}
58cfb410bc88d2236d04c1ba69205101
  sumEqualPlay :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.pairPlay1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
eef0bd12777232cd6aaded77c53f6559
  sumFirstPlay :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.sumFirstPlay1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
124f086544f88e403972c931a5a495e3
  sumFirstPlay1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Gen.sample1
                   @ (Lib.Sum GHC.Types.Char GHC.Types.Int)
                   Lib.$fShowSum_$s$fShowSum
                   Lib.sumFirstPlay2
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0]
                             <Lib.Sum GHC.Types.Char GHC.Types.Int>_R))) -}
ee2f3024ad66e6cf7f9d7e0b0f4db2ae
  sumFirstPlay2 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Lib.Sum GHC.Types.Char GHC.Types.Int
  {- Arity: 2,
     Unfolding: (Lib.sumFirstPlay3
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitraryChar
                   Test.QuickCheck.Arbitrary.$fArbitraryInt) -}
1c2bb6d1d6956f03e4cfc3434aa2ba9b
  sumFirstPlay3 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Lib.Sum a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   a1 :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 let {
                   b1 :: b
                   = (Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                       (case ds2 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.frequency
                    @ (Lib.Sum a b)
                    (GHC.Types.:
                       @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (Lib.Sum a b))
                       (Lib.sumFirstPlay5,
                        let {
                          x :: Lib.Sum a b = Lib.First @ a @ b a1
                        } in
                        (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                         x)
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Sum a b>_R)))
                       (GHC.Types.:
                          @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (Lib.Sum a b))
                          (Lib.sumFirstPlay4,
                           let {
                             x :: Lib.Sum a b = Lib.Second @ a @ b b1
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                            x)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Sum a b>_R)))
                          (GHC.Types.[]
                             @ (GHC.Types.Int, Test.QuickCheck.Gen.Gen (Lib.Sum a b))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Lib.Sum a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
75a5fb4de6ebf1002b75c493117b3e3a
  sumFirstPlay4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
510c0a10b6729ee69eb0ce8684851c42
  sumFirstPlay5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
506ff7f576b3d2632a73e4f1f1b5ad3f
  sumGenCharInt ::
    Test.QuickCheck.Gen.Gen (Lib.Sum GHC.Types.Char GHC.Types.Int)
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                Lib.sumGenCharInt1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          <Lib.Sum GHC.Types.Char GHC.Types.Int>_R)) -}
54dcfe8477b71d9eb68e8543e272f2c0
  sumGenCharInt1 ::
    Test.QuickCheck.Random.QCGen
    -> GHC.Types.Int -> Lib.Sum GHC.Types.Char GHC.Types.Int
  {- Arity: 2,
     Unfolding: (Lib.sumGenCharInt2
                   @ GHC.Types.Char
                   @ GHC.Types.Int
                   Test.QuickCheck.Arbitrary.$fArbitraryChar
                   Test.QuickCheck.Arbitrary.$fArbitraryInt) -}
b18b9d741b41672d0b97cdba79cafeb1
  sumGenCharInt2 ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Lib.Sum a b
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary a)
                   ($dArbitrary1 :: Test.QuickCheck.Arbitrary.Arbitrary b)
                   (eta :: Test.QuickCheck.Random.QCGen)
                   (eta1 :: GHC.Types.Int) ->
                 let {
                   ds1 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case eta
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } }
                 } in
                 let {
                   ds2 :: (Test.QuickCheck.Random.QCGen, Test.QuickCheck.Random.QCGen)
                   = case ds1 of wild { (,) r1 r2 ->
                     case r2
                            `cast`
                          (Test.QuickCheck.Random.N:QCGen[0]) of ww { System.Random.TF.Gen.TFGen ww1 ww2 ww3 ww4 ww5 ww6 ->
                     case System.Random.TF.Gen.$wtfGenSplit
                            ww1
                            ww2
                            ww3
                            ww4 of ww7 { (#,#) ww8 ww9 ->
                     (ww8 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0])),
                      ww9 `cast` (Sym (Test.QuickCheck.Random.N:QCGen[0]))) } } }
                 } in
                 let {
                   a1 :: a
                   = (Test.QuickCheck.Arbitrary.arbitrary @ a $dArbitrary)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <a>_R)
                       (case ds1 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 let {
                   b1 :: b
                   = (Test.QuickCheck.Arbitrary.arbitrary @ b $dArbitrary1)
                       `cast`
                     (Test.QuickCheck.Gen.N:Gen[0] <b>_R)
                       (case ds2 of wild { (,) r1 r2 -> r1 })
                       eta1
                 } in
                 (Test.QuickCheck.Gen.oneof
                    @ (Lib.Sum a b)
                    (GHC.Types.:
                       @ (Test.QuickCheck.Gen.Gen (Lib.Sum a b))
                       (let {
                          x :: Lib.Sum a b = Lib.First @ a @ b a1
                        } in
                        (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                         x)
                          `cast`
                        (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Sum a b>_R)))
                       (GHC.Types.:
                          @ (Test.QuickCheck.Gen.Gen (Lib.Sum a b))
                          (let {
                             x :: Lib.Sum a b = Lib.Second @ a @ b b1
                           } in
                           (\ (ds :: Test.QuickCheck.Random.QCGen) (ds3 :: GHC.Types.Int) ->
                            x)
                             `cast`
                           (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Sum a b>_R)))
                          (GHC.Types.[] @ (Test.QuickCheck.Gen.Gen (Lib.Sum a b))))))
                   `cast`
                 (Test.QuickCheck.Gen.N:Gen[0] <Lib.Sum a b>_R)
                   (case ds2 of wild { (,) r1 r2 -> r2 })
                   eta1) -}
b6fc2af63bf29ed0db97a5ef6a46dd89
  sumGenCharIntFirst ::
    Test.QuickCheck.Gen.Gen (Lib.Sum GHC.Types.Char GHC.Types.Int)
  {- Arity: 2,
     Unfolding: InlineRule (0, True, True)
                Lib.sumFirstPlay2
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0]
                          <Lib.Sum GHC.Types.Char GHC.Types.Int>_R)) -}
0df967063128a875592b17b5da6ce2e9
  sumGenEqual ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Lib.Sum a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.sumGenCharInt2
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Sum a b>_R)) -}
3498d59b39224bfe9e6da1af0cacc854
  sumGenFirstPls ::
    (Test.QuickCheck.Arbitrary.Arbitrary a,
     Test.QuickCheck.Arbitrary.Arbitrary b) =>
    Test.QuickCheck.Gen.Gen (Lib.Sum a b)
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(U)),A)><L,1*U(1*C1(C1(U)),A)><L,1*U(U,U,U,1*U,A,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Lib.sumFirstPlay3
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Test.QuickCheck.Arbitrary.Arbitrary a>_R
                 ->_R <Test.QuickCheck.Arbitrary.Arbitrary b>_R
                 ->_R Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Sum a b>_R)) -}
1536201211676383ca628023843765ee
  trivialGen :: Test.QuickCheck.Gen.Gen Lib.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (0, True, True)
                Lib.trivialGen1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Trivial>_R)) -}
1536201211676383ca628023843765ee
  trivialGen1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> Lib.Trivial
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,A>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Test.QuickCheck.Random.QCGen) (ds1 :: GHC.Types.Int) ->
                 Lib.Trivial) -}
fb253e1ea4e7e9bdcabc0c60e1bd834a
  trivialPlay :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.trivialPlay1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
6bf9dfff48b74bdc64020dce6f9c4953
  trivialPlay1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Test.QuickCheck.Gen.sample1
                   @ Lib.Trivial
                   Lib.$fShowTrivial
                   Lib.trivialGen1
                     `cast`
                   (Sym (Test.QuickCheck.Gen.N:Gen[0] <Lib.Trivial>_R))) -}
0fb6d545d72b166a58d47b8416454956
  trueGen :: Test.QuickCheck.Gen.Gen GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                Lib.trueGen1
                  `cast`
                (Sym (Test.QuickCheck.Gen.N:Gen[0] <GHC.Types.Int>_R)) -}
5400ff0229290c415b36f2fde7e1360a
  trueGen1 ::
    Test.QuickCheck.Random.QCGen -> GHC.Types.Int -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,1*U(U,U,U,1*U,A,A)><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Test.QuickCheck.Random.QCGen) (w1 :: GHC.Types.Int) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case Lib.$wtrueGen w ww1 of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 } }) -}
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Lib.Identity]
  = Lib.$fArbitraryIdentity
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Lib.Pair]
  = Lib.$fArbitraryPair
instance [safe] Test.QuickCheck.Arbitrary.Arbitrary [Lib.Trivial]
  = Lib.$fArbitraryTrivial
instance [safe] Test.QuickCheck.Arbitrary.CoArbitrary [Lib.Bool']
  = Lib.$fCoArbitraryBool'
instance [safe] GHC.Classes.Eq [Lib.Identity] = Lib.$fEqIdentity
instance [safe] GHC.Classes.Eq [Lib.Pair] = Lib.$fEqPair
instance [safe] GHC.Classes.Eq [Lib.Sum] = Lib.$fEqSum
instance [safe] GHC.Classes.Eq [Lib.Trivial] = Lib.$fEqTrivial
instance [safe] GHC.Generics.Generic [Lib.Bool']
  = Lib.$fGenericBool'
instance [safe] GHC.Show.Show [Lib.Identity] = Lib.$fShowIdentity
instance [safe] GHC.Show.Show [Lib.Pair] = Lib.$fShowPair
instance [safe] GHC.Show.Show [Lib.Sum] = Lib.$fShowSum
instance [safe] GHC.Show.Show [Lib.Trivial] = Lib.$fShowTrivial
family instance GHC.Generics.Rep [Lib.Bool'] = Lib.Rep_Bool'
"SPEC $cshow @ Char @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                        GHC.Types.Char)
                                           ($dShow1 :: GHC.Show.Show GHC.Types.Int)
  Lib.$fShowSum_$cshow @ GHC.Types.Char
                       @ GHC.Types.Int
                       $dShow1
                       $dShow
  = Lib.$fShowSum_$s$cshow
"SPEC $cshow @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                 GHC.Types.Int)
  Lib.$fShowIdentity_$cshow @ GHC.Types.Int $dShow
  = Lib.$fShowIdentity_$s$cshow
"SPEC $cshowList @ Char @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                            GHC.Types.Char)
                                               ($dShow1 :: GHC.Show.Show GHC.Types.Int)
  Lib.$fShowSum_$cshowList @ GHC.Types.Char
                           @ GHC.Types.Int
                           $dShow1
                           $dShow
  = Lib.$fShowSum_$s$cshowList
"SPEC $cshowList @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                     GHC.Types.Int)
  Lib.$fShowIdentity_$cshowList @ GHC.Types.Int $dShow
  = Lib.$fShowIdentity_$s$cshowList
"SPEC $cshowsPrec @ Char @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                             GHC.Types.Char)
                                                ($dShow1 :: GHC.Show.Show GHC.Types.Int)
  Lib.$fShowSum_$cshowsPrec @ GHC.Types.Char
                            @ GHC.Types.Int
                            $dShow1
                            $dShow
  = Lib.$fShowSum_$s$cshowsPrec
"SPEC $cshowsPrec @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                      GHC.Types.Int)
  Lib.$fShowIdentity_$cshowsPrec @ GHC.Types.Int $dShow
  = Lib.$fShowIdentity_$s$cshowsPrec
"SPEC $fShowIdentity @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                         GHC.Types.Int)
  Lib.$fShowIdentity @ GHC.Types.Int $dShow
  = Lib.$fShowIdentity_$s$fShowIdentity
"SPEC $fShowSum @ Char @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                           GHC.Types.Char)
                                              ($dShow1 :: GHC.Show.Show GHC.Types.Int)
  Lib.$fShowSum @ GHC.Types.Char @ GHC.Types.Int $dShow1 $dShow
  = Lib.$fShowSum_$s$fShowSum
"SPEC/Lib $fArbitrary[] @ Char" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                  GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[] @ GHC.Types.Char
                                          $dArbitrary
  = Lib.$s$fArbitrary[]
"SPEC/Lib $fArbitrary[]_$cshrink @ Char" [ALWAYS] forall ($dArbitrary :: Test.QuickCheck.Arbitrary.Arbitrary
                                                                           GHC.Types.Char)
  Test.QuickCheck.Arbitrary.$fArbitrary[]_$cshrink @ GHC.Types.Char
                                                   $dArbitrary
  = Lib.$s$fArbitrary[]_$s$fArbitrary[]_$cshrink
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

